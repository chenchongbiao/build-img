import { echo_info, echo_error, echo_success, env_const_get } from "std/env"
import { file_chown, file_write } from "std/fs"
import { math_ceil } from "std/math"

import { get_rootfs_path, get_rootfs_cache_path, get_tar_file_name, get_tar_file_path, get_image_path, get_device_config_path, get_tmp_path, get_rootfs_name, get_config_path, get_cache_path, get_output_path, get_livecd_path } from "../utils/file.ab"
import { umount_chroot, mount_chroot, run_command_in_chroot } from "./chroot.ab"
import { extract_rootfs } from "./rootfs.ab"

#[allow_absurd_cast]
pub fun create_image(distro_name, distro_version, arch, sources, base_type, device, image_size) {
    let rootfs_path = get_rootfs_path(distro_name, distro_version, arch, base_type)
    let rootfs_size = trust $sudo du --apparent-size -sm {rootfs_path} | cut -f1$ as Num
    echo_info("current rootfs size: {rootfs_size} MiB")

    let image_size_int = image_size as Num

    let uefi_size = 300
    let extra_rootfs_size = 500

    let fixed_image_size = image_size_int
    if image_size_int < rootfs_size {
        fixed_image_size = rootfs_size + uefi_size + extra_rootfs_size
    }

    // 计算最终需要生成的镜像大小对齐至4MiB
    // 再进行扩展，生成镜像的大小
    let sdsize = fixed_image_size
    if base_type == "minimal" {
        // sdsize = trust $bc -l <<< "scale=0; ((({image_size_int} * 1.35) / 1 + 0) / 4 + 1) * 4"$ as Num
        sdsize = math_ceil((fixed_image_size * 1.3 / 4) * 4)
    } else {
        // 安装桌面, 需要更大的空间
        sdsize = math_ceil((fixed_image_size * 1.35 / 4) * 4)
    }
    echo_info("set image size: {sdsize} MIB")

    let image_path = get_image_path(distro_name, distro_version, device, arch, base_type)
    $dd if=/dev/zero of={image_path} bs=1M count={sdsize}$ failed {
        echo_error("dd image error")
    }

    let next = 1

    let config_part = -1
    if device == "rock-5b" {
		config_part = next
		next += 1
	}

    let uefi_part = next
    next += 1
    let root_part = next

    echo_info("create partition table")
    if config_part > 0 {
        // 这里给 rock5b 单独需要设置 config 分区，另外的设置根分区为 8300 的通用文件系统时启动后也无法正确挂载。这里设置 8305 Linux ARM64 root
        let config_size = 16
        $(echo n; echo {config_part}; echo "32768"; echo +{config_size}M; echo 0700; \
		echo c; echo config; \
		echo n; echo {uefi_part}; echo "65536"; echo +{uefi_size}M; echo ef00; \
		echo c; echo {uefi_part}; echo efi; \
		echo n; echo {root_part}; echo \"\"; echo \"\"; echo \"\";\
		echo c; echo {root_part}; echo root; \
		echo w; echo y) | gdisk {image_path}$ failed {
            echo_error("create partition table error")
        }

        // 给 rock5b 设置 legacy_boot flag，否则启动的时候无法找到
        trust $sudo parted {image_path} set {root_part} legacy_boot on $
    } else {
        $(echo n; echo {uefi_part}; echo \"\"; echo +{uefi_size}M;  echo ef00; \
		echo c; echo efi; \
		echo n; echo {root_part}; echo \"\"; echo \"\"; echo \"\"; \
		echo c; echo {root_part}; echo root; \
		echo w; echo y) | gdisk {image_path}$ failed {
            echo_error("create partition table error")
        }
    }

    echo_info("losetup {image_path}")
    let loop_device = $sudo losetup -Pf --show {image_path}$ failed {
        echo_error("losetup -Pf --show {image_path} error")
    }

    let device_config_path = get_device_config_path(arch, device)

    trust {
        // 设置这些文件系统的标签。dosfslabel 是用来设置vfat（FAT）文件系统的标签，e2label 是用来设置ext2/ext3/ext4文件系统的标签
        $sudo mkfs.vfat -F32 {loop_device}p{uefi_part}$
        $sudo dosfslabel {loop_device}p{uefi_part} efi$
        $sudo mkfs.ext4 {loop_device}p{root_part}$
        $sudo e2label {loop_device}p{root_part} root$

        if config_part > 0 {
            $sudo mkfs.vfat -F32 {loop_device}p{config_part}$
            $sudo e2label {loop_device}p{config_part} config$
            $sudo fatlabel {loop_device}p{config_part} config$
        }
    }

    umount_chroot()
    echo_info("mount {loop_device}p{root_part} {get_tmp_path()}")
    trust $sudo mount {loop_device}p{root_part} {get_tmp_path()}$
    let tar_file_name = get_tar_file_name(distro_name, distro_version, arch, base_type)
    let tar_file_path = get_tar_file_path(tar_file_name)
    extract_rootfs(tar_file_path)
    mount_chroot()

    trust $sudo mkdir {get_tmp_path()}/boot/efi$
    echo_info("mount {loop_device}p{uefi_part} {get_tmp_path()}/boot/efi")
    trust $sudo mount {loop_device}p{uefi_part} {get_tmp_path()}/boot/efi$
    trust $sudo cp -r {device_config_path}/EFI {get_tmp_path()}/boot/efi 2>/dev/null$

    echo_info("copy grup to {get_tmp_path()}/boot")
    trust $sudo cp -r {device_config_path}/grub {get_tmp_path()}/boot 2>/dev/null$

    echo_info("copy kernel to {get_tmp_path()}/boot")
    trust $sudo cp -r {device_config_path}/kernel/* {get_tmp_path()}/boot 2>/dev/null$
    trust $sudo mkdir {get_tmp_path()}/lib/modules$
    trust $sudo cp -r {device_config_path}/modules/* {get_tmp_path()}/lib/modules 2>/dev/null$

    echo_info("copy sources.list.d to {get_tmp_path()}/etc/apt/sources.list.d")
    trust $sudo cp -r {device_config_path}/sources.list.d/* {get_tmp_path()}/etc/apt/sources.list.d 2>/dev/null$

    echo_info("copy extra packages to {get_tmp_path()}/tmp")
    trust $cp -r {device_config_path}/extra-packages/* {get_tmp_path()}/tmp || true$
    echo_info("installing extra packages from {get_tmp_path()}/tmp")
    run_command_in_chroot(get_tmp_path(), "cd /tmp && apt install -y ./*deb")

    if device == "rock-5b" {
        // 开关，第一次搓的时候运行，后续把搓好的镜像到宿主机把 ko.xz 解压后， sudo depmod -a 重新扫描模块后，重新打包镜像
        if true {
            trust $sudo mkdir {get_tmp_path()}/config$
            trust $sudo mount {loop_device}p{config_part} {get_tmp_path()}/config$

            // rock 5b 用 github 做 apt 仓库，需要代理
            trust $echo 'Acquire::https::Proxy \"http://10.20.42.187:7890\";' | sudo tee {get_tmp_path()}/etc/apt/apt.conf > /dev/null$
            trust $echo 'Acquire::http::Proxy \"http://10.20.42.187:7890\";' | sudo tee -a {get_tmp_path()}/etc/apt/apt.conf > /dev/null$
            run_command_in_chroot(get_tmp_path(), "apt update")
            // debian dkms 加了 /etc/kernel 下的内容
            trust $curl -L -o {get_tmp_path()}/tmp/dkms.deb https://mirrors.aliyun.com/debian/pool/main/d/dkms/dkms_3.0.10-8%2bdeb12u1_all.deb$
            run_command_in_chroot(get_tmp_path(), "apt reinstall -y --allow-downgrades /tmp/dkms.deb")
            run_command_in_chroot(get_tmp_path(), "apt install -y \\
                radxa-bootutils radxa-firmware radxa-otgutils radxa-udev \\
                rfkill \\
                u-boot-tools efibootmgr systemd-boot apt-listchanges \\
                pipewire-audio avahi-daemon")
            run_command_in_chroot(get_tmp_path(), "apt install -y rsetup-config-first-boot radxa-system-config-kernel-cmdline-ttyfiq0 u-boot-rock-5b")
            run_command_in_chroot(get_tmp_path(), "apt install -y task-rock-5b linux-headers-rock-5b linux-image-rock-5b")

            trust $sudo rm {get_tmp_path()}/etc/apt/apt.conf$
        }

        run_command_in_chroot(get_tmp_path(), "cd /usr/lib/u-boot/{device} && ./setup.sh update_bootloader {loop_device} rk3588")
    }

    echo_info("generate /etc/fstab")
    let root_part_uuid = trust $sudo blkid -s UUID -o value {loop_device}p{root_part}$
    echo_info("root uuid: {root_part_uuid}")
    trust $echo \"UUID={root_part_uuid} / ext4 defaults,rw,errors=remount-ro,x-systemd.growfs 0 1\" | sudo tee {get_tmp_path()}/etc/fstab > /dev/null$
    if config_part > 0 {
        let config_part_uuid = trust $sudo blkid -s UUID -o value {loop_device}p{config_part}$
        echo_info("config uuid: {config_part_uuid}")
        trust $echo \"UUID={config_part_uuid} /config vfat defaults,x-systemd.automount 0 2\" | sudo tee -a {get_tmp_path()}/etc/fstab > /dev/null$
    }
    let uefi_part_uuid = trust $sudo blkid -s UUID -o value {loop_device}p{uefi_part}$
    echo_info("efi uuid: {uefi_part_uuid}")
    trust $echo \"UUID={uefi_part_uuid} /boot/efi vfat defaults,x-systemd.automount 0 2\" | sudo tee -a {get_tmp_path()}/etc/fstab > /dev/null$
    trust $sudo sed -i \"s/root_uuid/{root_part_uuid}/g\" {get_tmp_path()}/boot/grub/grub.cfg 2>/dev/null$
    trust $sudo sed -i \"s/root_uuid/{root_part_uuid}/g\" {get_tmp_path()}/boot/efi/EFI/boot/grub.cfg 2>/dev/null$

    // rock-5b 的 u-boot-update 在更新的时候，不知道为啥会把宿主机的 UUID 识别成根，不过在结束构建后重新挂载，再使用命令又可以识别正常。这里直接 sed 替换
    run_command_in_chroot(get_tmp_path(), "sed -i 's/UUID=[0-9a-fA-F]\\\{8\\}-[0-9a-fA-F]\\\{4\\}-[0-9a-fA-F]\\\{4\\}-[0-9a-fA-F]\\\{4\\}-[0-9a-fA-F]\\\{12\\}/UUID={root_part_uuid}/' /boot/extlinux/extlinux.conf 2>/dev/null")

    // 添加自动扩容，配合 /etc/fstab x-systemd.growfs
    trust $sudo mkdir -p {get_tmp_path()}/etc/repart.d$
    trust $echo \"[Partition]\" | sudo tee {get_tmp_path()}/etc/repart.d/growroot.conf > /dev/null$
    trust $echo \"Type=linux-generic\" | sudo tee -a {get_tmp_path()}/etc/repart.d/growroot.conf > /dev/null$
    trust $echo \"GrowFileSystem=true\" | sudo tee -a {get_tmp_path()}/etc/repart.d/growroot.conf > /dev/null$

    echo_info("set hostname")
    trust $echo \"deepin-{arch}-{device}\" | sudo tee {get_tmp_path()}/etc/hostname > /dev/null$

    echo_info("update-initramfs -u")
    run_command_in_chroot(get_tmp_path(), "update-initramfs -u")

    if device == "rock-5b" {
        // rock5b 把一些内核模块用xz压缩了，不知道为啥不能正确解压，这里将ko解压
        run_command_in_chroot(get_tmp_path(), "find /lib/modules -type f -name \"*.ko.xz\" -execdir xz -d \{} +")
    }

    if device != "rock-5b" {
        if base_type == "desktop" {
            // 配置 deepin-installer
            trust $sudo install -D {get_config_path()}/deepin-installer/deepin-installer.conf {get_tmp_path()}/etc/deepin-installer/deepin-installer.conf$
            trust $echo -n 'apt_source_deb=\"' | sudo tee -a {get_tmp_path()}/etc/deepin-installer/deepin-installer.conf > /dev/null$
            // TODO 循环多个源拼接
            trust $echo -n "{sources}\\\\n" | sudo tee -a {get_tmp_path()}/etc/deepin-installer/deepin-installer.conf > /dev/null$
            trust $echo -n '"' | sudo tee -a {get_tmp_path()}/etc/deepin-installer/deepin-installer.conf > /dev/null$

            trust $sudo ln -s ../deepin-installer-first-boot.service {get_tmp_path()}/usr/lib/systemd/system/multi-user.target.wants/deepin-installer-first-boot.service$
            trust $sudo rm {get_tmp_path()}/usr/lib/systemd/system/deepin-installer.service$
        }
        run_command_in_chroot(get_tmp_path(), "useradd  -s /bin/bash -m -g users deepin")
        run_command_in_chroot(get_tmp_path(), "usermod -a -G sudo deepin")
        run_command_in_chroot(get_tmp_path(), "echo deepin:deepin | chpasswd")
    }
    run_command_in_chroot(get_tmp_path(), "echo root:deepin | chpasswd")


    umount_chroot()
    silent trust $sudo e2fsck -p -f {loop_device}p{root_part}$
    silent trust $sudo resize2fs -M {loop_device}p{root_part}$
    trust $sudo losetup -D {loop_device}$

    echo_success("output {image_path} success")
}

pub fun create_livecd(distro_name, distro_version, arch, sources, base_type, device) {
    // 参考 https://www.cnblogs.com/searchstar/p/18437677
    umount_chroot()
    trust $sudo rm -rf {get_tmp_path()}/*$
    let tar_file_name = get_tar_file_name(distro_name, distro_version, arch, base_type)
    let tar_file_path = get_tar_file_path(tar_file_name)
    extract_rootfs(tar_file_path)
    mount_chroot()

    run_command_in_chroot(get_tmp_path(), "apt update")

    let arch_efi = ""
    if {
        arch == "amd64" {
            // 安装内核
            run_command_in_chroot(get_tmp_path(), "apt install -y linux-image-deepin-hwe-amd64")
            arch_efi = "x86_64-efi"
            run_command_in_chroot(get_tmp_path(), "apt install -y grub-efi-amd64-bin")
        }
        arch == "arm64" {
            run_command_in_chroot(get_tmp_path(), "apt install -y linux-image-6.6.36-arm64-desktop-hwe")
            arch_efi = "arm64-efi"
            run_command_in_chroot(get_tmp_path(), "apt install -y grub-efi-arm64-bin")
        }
    }
    // 提供init的
    run_command_in_chroot(get_tmp_path(), "apt install -y live-boot systemd-sysv")

    // 创建必要的目录, staging下面存放的就是用来制作ISO的文件。
    let staging = "{get_livecd_path()}/staging"
    trust $rm -rf {get_livecd_path()}$

    echo_info("mkdir {staging}")
    trust $mkdir -p \{{staging}/\{EFI/boot,boot/grub/{arch_efi},isolinux,live},{get_livecd_path()}/tmp}$

    // Boot Loader Files
    run_command_in_chroot(get_tmp_path(), "apt install -y isolinux")
    echo_info("cp Boot Loader Files")
    trust $cp {get_tmp_path()}/usr/lib/ISOLINUX/isohdpfx.bin {get_livecd_path()}/tmp/ && \\
    cp {get_tmp_path()}/usr/lib/ISOLINUX/isolinux.bin {staging}/isolinux/ && \\
    cp {get_tmp_path()}/usr/lib/syslinux/modules/bios/* {staging}/isolinux/$
    trust $cp -r {get_tmp_path()}/usr/lib/grub/{arch_efi}/* {staging}/boot/grub/{arch_efi}/$

    echo_info("cp kernel")
    trust $cp {get_tmp_path()}/boot/vmlinuz-* {staging}/live/vmlinuz$
    trust $cp {get_tmp_path()}/boot/initrd.img-* {staging}/live/initrd$
    let user = trust env_const_get("USER")
    file_chown("{staging}/live/initrd", user)

    if base_type == "desktop" {
        echo_info("add desktop to default")
        trust $sudo cp {get_tmp_path()}/usr/share/applications/firefox.desktop {get_tmp_path()}/etc/skel/Desktop$
        echo_info("remove desktop from {get_tmp_path()}/etc/skel/Desktop/org.deepin.browser.desktop")
        trust $sudo rm {get_tmp_path()}/etc/skel/Desktop/org.deepin.browser.desktop$
        echo_info("remove org.deepin.browser.desktop from {get_tmp_path()}/etc/skel/Desktop")
    }

    // 添加 deepin 用户
    echo_info("add user")
    run_command_in_chroot(get_tmp_path(), "useradd -s /bin/bash -m -g users deepin")
    run_command_in_chroot(get_tmp_path(), "usermod -a -G sudo deepin")
    run_command_in_chroot(get_tmp_path(), "echo deepin:deepin | chpasswd")

    // 允许 root 远程登录
    run_command_in_chroot(get_tmp_path(), "echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config")

    echo_info("set hostname")
    trust $echo \"deepin-{arch}\" | sudo tee {get_tmp_path()}/etc/hostname > /dev/null$

    echo_info("set locale")
    trust $echo \"LANG=zh_CN.UTF-8\" | sudo tee {get_tmp_path()}/etc/locale.conf > /dev/null$
    trust $echo \"LANGUAGE=zh_CN\" | sudo tee -a {get_tmp_path()}/etc/locale.conf > /dev/null$

    trust $echo \"LANG=zh_CN.UTF-8\" | sudo tee {get_tmp_path()}/etc/environment.d/locale.conf > /dev/null$
    trust $echo \"LANGUAGE=zh_CN\" | sudo tee -a {get_tmp_path()}/etc/environment.d/locale.conf > /dev/null$

    run_command_in_chroot(get_tmp_path(), "echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config")

    run_command_in_chroot(get_tmp_path(), "apt purge -y isolinux")
    if {
        arch == "amd64" {
            run_command_in_chroot(get_tmp_path(), "apt purge -y grub-efi-amd64-bin")
        }
        arch == "arm64" {
            run_command_in_chroot(get_tmp_path(), "apt purge -y grub-efi-arm64-bin")
        }
    }
    // 清理 apt 缓存
    run_command_in_chroot(get_tmp_path(), "apt clean")

    umount_chroot()

    // 修改完根文件系统之后，就可以把它压缩为squashfs了
    // /boot目录排除了，这是因为系统启动的时候会先读取/boot下面的内核等，最后才挂载根文件系统，因此/boot目录不能放到根文件系统里，而是另外放。
    trust $sudo mksquashfs \\
    {get_tmp_path()} \\
    {staging}/live/filesystem.squashfs \\
    -e boot$

    let isolinux_cfg = "{staging}/isolinux/isolinux.cfg"
    let text = "UI vesamenu.c32

MENU TITLE Boot Menu
DEFAULT linux
TIMEOUT 600
MENU RESOLUTION 640 480
MENU COLOR border       30;44   #40ffffff #a0000000 std
MENU COLOR title        1;36;44 #9033ccff #a0000000 std
MENU COLOR sel          7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel        37;44   #50ffffff #a0000000 std
MENU COLOR help         37;40   #c0ffffff #a0000000 std
MENU COLOR timeout_msg  37;40   #80ffffff #00000000 std
MENU COLOR timeout      1;37;40 #c0ffffff #00000000 std
MENU COLOR msg07        37;40   #90ffffff #a0000000 std
MENU COLOR tabmsg       31;40   #30ffffff #00000000 std

LABEL linux
  MENU LABEL deepin Live [BIOS/ISOLINUX]
  MENU DEFAULT
  KERNEL /live/vmlinuz
  APPEND initrd=/live/initrd boot=live

LABEL linux
  MENU LABEL deepin Live [BIOS/ISOLINUX] (nomodeset)
  MENU DEFAULT
  KERNEL /live/vmlinuz
  APPEND initrd=/live/initrd boot=live nomodeset"
    trust file_write(isolinux_cfg, text)

    let grub_cfg = "{staging}/boot/grub/grub.cfg"
    text = "search --set=root --label deepin

set default=\"0\"
set timeout=30

# If X has issues finding screens, experiment with/without nomodeset.

menuentry \"deepin Live [EFI/GRUB]\" \{
    insmod all_video
    linux ($root)/live/vmlinuz boot=live
    initrd ($root)/live/initrd
}

menuentry \"deepin Live [EFI/GRUB] (nomodeset)\" \{
    insmod all_video
    linux ($root)/live/vmlinuz boot=live nomodeset
    initrd ($root)/live/initrd
}"
    // 其中insmod all_video可以解决no suitable video mode found的问题：https://lists.gnu.org/archive/html/help-grub/2018-01/msg00009.html
    trust file_write(grub_cfg, text)

    let grub_standalone_cfg = "{get_livecd_path()}/tmp/grub-standalone.cfg"
    text = "search --set=root --label deepin
set prefix=($root)/boot/grub/
configfile /boot/grub/grub.cfg"
    trust file_write(grub_standalone_cfg, text)

    // 创建一个独立的GRUB2 EFI可执行文件
    let boot_efi_file = ""
    if {
        arch == "amd64" {
            // 安装内核
            boot_efi_file = "bootx64.efi"
        }
        arch == "arm64" {
            boot_efi_file = "bootaa64.efi"
        }
    }
    trust $grub-mkstandalone \\
    --format={arch_efi} \\
    --output={get_livecd_path()}/tmp/{boot_efi_file} \\
    --locales=\"\" \\
    --fonts=\"\" \\
    \"boot/grub/grub.cfg={grub_standalone_cfg}\"$

    // 创建一个EFI系统分区镜像文件
    let efi_boot_img = "{staging}/EFI/boot/efiboot.img"
    trust $dd if=/dev/zero of={efi_boot_img} bs=1M count=20$
    trust $/sbin/mkfs.vfat {efi_boot_img}$
    trust $mmd -i {efi_boot_img} efi efi/boot$
    trust $mcopy -vi {efi_boot_img} {get_livecd_path()}/tmp/{boot_efi_file} ::efi/boot/$

    let iso_path = "{get_output_path()}/deepin-custom-{arch}.iso"
    // 生成 iso
    trust $rm {iso_path}$
    trust $xorriso \\
    -as mkisofs \\
    -iso-level 3 \\
    -o {iso_path} \\
    -full-iso9660-filenames \\
    -volid "deepin" \\
    -isohybrid-mbr {get_livecd_path()}/tmp/isohdpfx.bin \\
    -eltorito-boot \\
        isolinux/isolinux.bin \\
        -no-emul-boot \\
        -boot-load-size 4 \\
        -boot-info-table \\
        --eltorito-catalog isolinux/isolinux.cat \\
    -eltorito-alt-boot \\
        -e /EFI/boot/efiboot.img \\
        -no-emul-boot \\
        -isohybrid-gpt-basdat \\
    -append_partition 2 0xef {staging}/EFI/boot/efiboot.img \\
    \"{staging}\"$
}
